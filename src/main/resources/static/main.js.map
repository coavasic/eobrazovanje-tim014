{"version":3,"sources":["webpack:///./src/app/obaveza/obaveza.component.html","webpack:///./src/app/uplate/uplate.component.html","webpack:///./src/app/dialogs/predaje.dialog.html","webpack:///./src/app/dialogs/pohadja.dialog.html","webpack:///./src/app/dialogs/nastavnik.dialog.html","webpack:///./src/app/app.component.css","webpack:///./src/app/dialogs/login.dialog.html","webpack:///./src/app/dokument-list/dokument-list.component.css","webpack:///./src/app/dokument-list/dokument-list.component.html","webpack:///./src/app/dialogs/novi.dokument.dialog.html","webpack:///./src/app/dialogs/obaveza.dialog.html","webpack:///./src/app/predmet/predmet.dialog.html","webpack:///./src/app/dialogs/password.dialog.html","webpack:///./src/app/predmet/predmet.component.html","webpack:///./src/app/predmet-info/predmet-info.component.html","webpack:///./src/app/predmet-info/predmet-info.component.css","webpack:///./src/app/uplate/uplate.component.css","webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/dialogs/student.dialog.html","webpack:///./src/app/obaveza/obaveza.component.css","webpack:///./src/app/korisnici/korisnici.component.html","webpack:///./src/app/app.component.html","webpack:///./src/app/korisnici/korisnici.component.css","webpack:///./src/app/predmet/predmet.component.css","webpack:///./src/app/dialogs/uplata.dialog.html","webpack:///./src/app/services/dokument.service.ts","webpack:///./src/app/services/snack-bar.service.ts","webpack:///./src/app/services/korisnik.service.ts","webpack:///./src/app/security/jwt-utils.service.ts","webpack:///./src/app/security/authentication.service.ts","webpack:///./src/app/dialogs/novi.dokument.dialog.ts","webpack:///./src/app/dokument-list/dokument-list.component.ts","webpack:///./src/app/dialogs/student.dialog.ts","webpack:///./src/app/dialogs/nastavnik.dialog.ts","webpack:///./src/app/korisnici/korisnici.component.ts","webpack:///./src/app/uplata.service.ts","webpack:///./src/app/dialogs/uplata.dialog.ts","webpack:///./src/app/uplate/uplate.component.ts","webpack:///./src/app/services/predmet.service.ts","webpack:///./src/app/services/obaveza.service.ts","webpack:///./src/app/dialogs/obaveza.dialog.ts","webpack:///./src/app/obaveza/obaveza.component.ts","webpack:///./src/app/predmet/predmet.dialog.ts","webpack:///./src/app/predmet/predmet.component.ts","webpack:///./src/app/dialogs/pohadja.dialog.ts","webpack:///./src/app/services/pohadja.predaje.service.ts","webpack:///./src/app/dialogs/predaje.dialog.ts","webpack:///./src/app/predmet-info/predmet-info.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/dialogs/login.dialog.ts","webpack:///./src/app/dialogs/password.dialog.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/material.module.ts","webpack:///./src/app/security/token-interceptor.service.ts","webpack:///./src/app/app.module.ts","webpack:///./src/main.ts"],"names":["module","exports","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","dokument_service_DokumentService","DokumentService","_http","this","prototype","sviDokumenti","get","downloadFile","fileName","responseType","deleteDoc","delete","uploadDoc","document","console","log","formData","FormData","append","file","name","JSON","stringify","dokument","post","__decorate","Object","core","providedIn","http","snack_bar_service_SnackBarService","SnackBarService","snackBar","openSnackBar","message","action","open","duration","snack_bar_service_decorate","snack_bar_es5","korisnik_service_KorisnikService","KorisnikService","getStudents","getNastavnici","getKorisnici","uploadStudent","student","mode","put","uploadNastavnik","nastavnik","deleteStudent","deleteNastavnik","getByPredmetId","getNastavnikByPredmetId","potencijalniNastavnici","potencijalniStudenti","predmetId","changePassowrd","data","korisnik_service_decorate","jwt_utils_service_JwtUtilsService","JwtUtilsService","getRoles","token","jwtData","split","decodedJwtJsonData","window","atob","decodedJwtData","parse","role","jwt_utils_service_decorate","authentication_service_AuthenticationService","AuthenticationService","jwtUtilsService","loginPath","login","user","_this","contentHeader","headers","observe","pipe","map","res","localStorage","setItem","username","getToken","currentUser","getItem","logout","removeItem","getRole","isLoggedIn","authentication_service_decorate","novi_dokument_dialog_NoviDokumentDialog","NoviDokumentDialog","dokumentService","dialogRef","korisnikService","authService","dokumentToUpload","ngOnInit","ucitavanjeStudenata","onNoClick","close","onFileInput","files","item","documentUploadFunction","subscribe","success","error","studenti","novi_dokument_dialog_decorate","selector","__param","dialog_es5","dokument_list_component_DokumentListComponent","DokumentListComponent","snackBarService","dialog","ucitavanjeDokumenata","openDialog","width","afterClosed","result","dokumenti","downloadDoc","blob","Blob","FileSaver","dokument_list_component_decorate","student_dialog_StudentDialog","StudentDialog","dialogData","forumSubmit","jmbg","student_dialog_decorate","student_dialog_param","nastavnik_dialog_NastavnikDialog","NastavnikDialog","resoult","nastavnik_dialog_decorate","nastavnik_dialog_param","korisnici_component_KorisniciComponent","KorisniciComponent","loadStudents","loadNastavnici","loadKorisnici","confirm","ime","prezime","nastavnici","korisnici","openStudDialog","openNastDialog","korisnici_component_decorate","uplata_service_UplataService","UplataService","ucitajUplate","deleteUplata","dodajUplatu","uplata","uplata_service_decorate","uplata_dialog_UplataDialog","UplataDialog","uplataService","ucitajStudente","datumUplate","brojIndeksa","uplata_dialog_decorate","uplata_dialog_param","uplate_component_UplateComponent","UplateComponent","loggedIn","loadUplate","uplate","uplate_component_decorate","predmet_service_PredmetService","PredmetService","getAll","getAllPaged","page","pageSize","postPredmet","predmet","deletePredmet","getAllPohadja","getAllPredaje","predmet_service_decorate","obaveza_service_ObavezaService","ObavezaService","dodaj","obaveza","poloziPredmet","deleteObaveza","obaveza_service_decorate","obaveza_dialog_ObavezaDialog","ObavezaDialog","predmetService","obavezaService","ucitajPredmete","polozen","onPredmetChange","val","response","predmeti","obaveza_dialog_decorate","obaveza_dialog_param","obaveza_component_ObavezaComponent","ObavezaComponent","obaveze","obaveza_component_decorate","predmet_dialog_PredmetDialog","PredmetDialog","submitForm","predmet_dialog_decorate","predmet_dialog_param","predmet_component_PredmetComponent","PredmetComponent","router","getAllPredmetPohadja","getAllPredmetPredaje","naziv","openPredmet","navigate","queryParams","predmetiPohadja","predmet_component_decorate","pohadja_dialog_PohadjaDialog","PohadjaDialog","pohadja_dialog_decorate","pohadja_dialog_param","pohadja_predaje_service_PohadjaPredajeService","PohadjaPredajeService","novoPohadjanje","pohadja","novoPredavanje","predaje","deletePredaje","deletePohadja","pohadja_predaje_service_decorate","predaje_dialog_PredajeDialog","PredajeDialog","predaje_dialog_decorate","predaje_dialog_param","predmet_info_component_PredmetInfoComponent","PredmetInfoComponent","pohadjaPredajeService","route","idNotFound","parseInt","snapshot","queryParamMap","isNaN","studentiKojiPohadjaju","predmet_info_component_decorate","routes","path","component","app_routing_module_AppRoutingModule","AppRoutingModule","app_routing_module_decorate","imports","forRoot","login_dialog_LoginDialog","LoginDialog","location","reload","login_dialog_decorate","password_dialog_PasswordDialog","PasswordDialog","submitPassword","password_dialog_decorate","app_component_AppComponent","AppComponent","title","openLoginDialog","promenaLozinke","odjava","clear","app_component_decorate","material_module_MaterialModule","MaterialModule","material_module_decorate","table_es5","tree_es5","autocomplete_es5","badge_es5","bottom_sheet_es5","button_es5","button_toggle_es5","card_es5","checkbox_es5","chips_es5","stepper_es5","datepicker_es5","divider_es5","expansion_es5","grid_list_es5","icon_es5","input_es5","list_es5","menu_es5","core_es5","paginator_es5","progress_bar_es5","progress_spinner_es5","radio_es5","select_es5","sidenav_es5","slider_es5","slide_toggle_es5","sort_es5","esm5_table_es5","tabs_es5","toolbar_es5","tooltip_es5","esm5_tree_es5","token_interceptor_service_TokenInterceptorService","TokenInterceptorService","inj","intercept","request","next","authenticationService","clone","setHeaders","X-Auth-Token","handle","token_interceptor_service_decorate","app_module_AppModule","AppModule","app_module_decorate","declarations","platform_browser","animations","fesm5_forms","entryComponents","providers","provide","useClass","multi","bootstrap","platform_browser_dynamic","bootstrapModule","catch","err"],"mappings":"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","file":"main.js","sourcesContent":["module.exports = \"<div *ngIf=\\\"loggedIn\\\">\\r\\n<mat-list class=\\\"container\\\">\\r\\n    <h3 mat-subheader>Obaveze</h3>\\r\\n    <mat-list-item *ngFor=\\\"let obaveza of obaveze\\\">\\r\\n      <mat-icon mat-list-icon>\\r\\n        account_circle\\r\\n      </mat-icon>\\r\\n      <h4 mat-line>{{obaveza.imePrezime}}</h4>\\r\\n      <h5 mat-line>{{obaveza.predmetNaziv}}</h5>\\r\\n      <p mat-line>{{obaveza.polozen}}  {{obaveza.datumObaveze | date:'shortDate'}}</p>\\r\\n      <span class=\\\"example-spacer\\\"></span>\\r\\n      <button mat-icon-button color=\\\"primary\\\">\\r\\n        <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\" (click)=\\\"openDialog('edit',uplata)\\\">edit</mat-icon>\\r\\n      </button>\\r\\n      <button mat-icon-button color=\\\"primary\\\">\\r\\n        <mat-icon (click)=\\\"deleteObaveza(obaveza)\\\" aria-label=\\\"Example icon-button with a heart icon\\\">delete</mat-icon>\\r\\n      </button>\\r\\n      <button [disabled]=\\\"obaveza.polozen\\\" mat-icon-button color=\\\"primary\\\">\\r\\n        <mat-icon (click)=\\\"poloziPredmet(obaveza.id)\\\" aria-label=\\\"Example icon-button with a heart icon\\\">done_outline</mat-icon>\\r\\n      </button>\\r\\n    </mat-list-item>\\r\\n  </mat-list>\\r\\n  <br>\\r\\n\\r\\n<button [disabled]=\\\"role!='administrator'\\\" mat-flat-button color=\\\"primary\\\" (click)=\\\"openDialog('add')\\\">Nova obaveza</button>\\r\\n</div>\"","module.exports = \"<div *ngIf=\\\"loggedIn && role!='nastavnik'\\\">\\n<mat-list class=\\\"container\\\">\\n  <h3 mat-subheader>Studenti</h3>\\n  <mat-list-item *ngFor=\\\"let uplata of uplate\\\">\\n    <mat-icon mat-list-icon>\\n      account_circle\\n    </mat-icon>\\n    <h4 mat-line>{{uplata.imePrezime}}</h4>\\n    <h5 mat-line>{{uplata.svrhaUplate}}</h5>\\n    <p mat-line>{{uplata.iznos}}  {{uplata.datumUplate | date:'shortDate'}}</p>\\n    <span class=\\\"example-spacer\\\"></span>\\n    <button mat-icon-button color=\\\"primary\\\">\\n      <mat-icon *ngIf=\\\"role=='administrator'\\\" aria-label=\\\"Example icon-button with a heart icon\\\" (click)=\\\"openDialog('edit',uplata)\\\">edit</mat-icon>\\n    </button>\\n    <button *ngIf=\\\"role=='administrator'\\\" mat-icon-button color=\\\"primary\\\">\\n      <mat-icon (click)=\\\"deleteUplata(uplata)\\\" aria-label=\\\"Example icon-button with a heart icon\\\">delete</mat-icon>\\n    </button>\\n  </mat-list-item>\\n</mat-list>\\n<br>\\n<button [disabled]=\\\"role!='administrator'\\\" mat-flat-button color=\\\"primary\\\" (click)=\\\"openDialog('add')\\\">Nova uplata</button>    \\n</div>\"","module.exports = \"<h1 mat-dialog-title>Predaje</h1>\\r\\n<form #predajeForm=\\\"ngForm\\\" (submit)=\\\"forumSubmit(predajeForm.value)\\\">\\r\\n    <div mat-dialog-content>\\r\\n        <mat-form-field style=\\\"width:100%;\\\">\\r\\n            <mat-select name=\\\"jmbg\\\" ngModel placeholder=\\\"Izaberi nastavnika\\\" required>\\r\\n                <mat-option>--</mat-option>\\r\\n                <mat-option *ngFor=\\\"let nastavnik of nastavnici\\\" [value]=\\\"nastavnik.jmbg\\\">\\r\\n                    {{nastavnik.ime}} {{nastavnik.prezime}} {{nastavnik.zvanje}}\\r\\n                </mat-option>\\r\\n            </mat-select>\\r\\n        </mat-form-field>\\r\\n    </div>\\r\\n    <div mat-dialog-actions>\\r\\n\\r\\n\\r\\n        <button type=\\\"submit\\\" [disabled]=\\\"!predajeForm.valid\\\" color=\\\"primary\\\" mat-flat-button>\\r\\n            Potvrdi\\r\\n        </button>\\r\\n        <span style=\\\"flex: 1 1 auto;\\\"></span>\\r\\n        <button mat-button type=\\\"button\\\" (click)=\\\"onNoClick()\\\">Odustani</button>\\r\\n\\r\\n    </div>\\r\\n</form>\"","module.exports = \"<h1 mat-dialog-title>Pohadja</h1>\\r\\n<form #pohadjaForm=\\\"ngForm\\\" (submit)=\\\"forumSubmit(pohadjaForm.value)\\\">\\r\\n    <div mat-dialog-content>\\r\\n        <mat-form-field style=\\\"width:100%;\\\">\\r\\n            <mat-select name=\\\"jmbg\\\" ngModel placeholder=\\\"Izaberi studenta\\\" required>\\r\\n                <mat-option>--</mat-option>\\r\\n                <mat-option *ngFor=\\\"let student of studenti\\\" [value]=\\\"student.jmbg\\\">\\r\\n                    {{student.ime}} {{student.prezime}} {{student.brojIndeksa}}\\r\\n                </mat-option>\\r\\n            </mat-select>\\r\\n        </mat-form-field>\\r\\n    </div>\\r\\n    <div mat-dialog-actions>\\r\\n\\r\\n\\r\\n        <button type=\\\"submit\\\" [disabled]=\\\"!pohadjaForm.valid\\\" color=\\\"primary\\\" mat-flat-button>\\r\\n            Potvrdi\\r\\n        </button>\\r\\n        <span style=\\\"flex: 1 1 auto;\\\"></span>\\r\\n        <button mat-button type=\\\"button\\\" (click)=\\\"onNoClick()\\\">Odustani</button>\\r\\n\\r\\n    </div>\\r\\n</form>\"","module.exports = \"<h1 mat-dialog-title>Student</h1>\\r\\n<form #nastavnikForm=\\\"ngForm\\\" (submit)=\\\"forumSubmit(nastavnikForm.value)\\\">\\r\\n    <div mat-dialog-content>\\r\\n            <mat-form-field style=\\\"width:100%;\\\">\\r\\n                <input [readonly]=\\\"mode=='view'\\\" matInput name=\\\"korisnickoIme\\\" placeholder=\\\"Korisnicko ime\\\" [ngModel]=\\\"nastavnik.korisnickoIme\\\">\\r\\n            </mat-form-field>\\r\\n            <br>\\r\\n            <mat-form-field style=\\\"width:100%;\\\">\\r\\n                <input [readonly]=\\\"mode=='view'\\\" matInput name=\\\"ime\\\" placeholder=\\\"Ime\\\" [ngModel]=\\\"nastavnik.ime\\\">\\r\\n            </mat-form-field>\\r\\n            <br>\\r\\n            <mat-form-field style=\\\"width:100%;\\\">\\r\\n                <input [readonly]=\\\"mode=='view'\\\" matInput name=\\\"prezime\\\" placeholder=\\\"Prezime\\\" [ngModel]=\\\"nastavnik.prezime\\\">\\r\\n            </mat-form-field>\\r\\n            <br>\\r\\n            <mat-form-field style=\\\"width:100%;\\\">\\r\\n                <input [readonly]=\\\"mode=='view'\\\" matInput name=\\\"email\\\" placeholder=\\\"Email\\\" [ngModel]=\\\"nastavnik.email\\\">\\r\\n            </mat-form-field>\\r\\n            <br>\\r\\n            <mat-form-field *ngIf=\\\"mode=='add'\\\" style=\\\"width:100%;\\\">\\r\\n                <input  *ngIf=\\\"mode=='add'\\\" type=\\\"password\\\" matInput name=\\\"lozinka\\\" placeholder=\\\"Lozinka\\\" [ngModel]=\\\"nastavnik.lozinka\\\">\\r\\n            </mat-form-field>\\r\\n            <br *ngIf=\\\"mode=='edit' || mode=='add'\\\">\\r\\n            <mat-form-field style=\\\"width:100%;\\\">\\r\\n                <input [readonly]=\\\"mode=='view'\\\" matInput name=\\\"ulicaBroj\\\" placeholder=\\\"Ulica i broj\\\" [ngModel]=\\\"nastavnik.ulicaBroj\\\">\\r\\n            </mat-form-field>\\r\\n            <br>\\r\\n            <mat-form-field style=\\\"width:100%;\\\">\\r\\n                <input [readonly]=\\\"mode=='view'\\\" matInput name=\\\"postanskiBroj\\\" placeholder=\\\"Postanski broj\\\" [ngModel]=\\\"nastavnik.postanskiBroj\\\">\\r\\n            </mat-form-field>\\r\\n            <br>\\r\\n            <mat-form-field style=\\\"width:100%;\\\">\\r\\n                <input [readonly]=\\\"mode=='view'\\\" matInput name=\\\"mesto\\\" placeholder=\\\"Mesto\\\" [ngModel]=\\\"nastavnik.mesto\\\">\\r\\n            </mat-form-field>\\r\\n            <br>\\r\\n            <mat-form-field style=\\\"width:100%;\\\">\\r\\n                <input [readonly]=\\\"mode=='view'\\\" matInput name=\\\"zvanje\\\" placeholder=\\\"Zvanje\\\" [ngModel]=\\\"nastavnik.zvanje\\\">\\r\\n            </mat-form-field>\\r\\n            <br>\\r\\n        <br>\\r\\n\\r\\n\\r\\n    </div>\\r\\n    <div mat-dialog-actions>\\r\\n\\r\\n\\r\\n        <button type=\\\"submit\\\" [disabled]=\\\"mode=='view' || !nastavnikForm.valid\\\" color=\\\"primary\\\" mat-flat-button>\\r\\n            Potvrdi\\r\\n        </button>\\r\\n        <span style=\\\"flex: 1 1 auto;\\\"></span>\\r\\n        <button mat-button (click)=\\\"onNoClick()\\\">Odustani</button>\\r\\n\\r\\n    </div>\\r\\n</form>\"","module.exports = \".fil-space{\\r\\n    flex: 1 1 auto;\\r\\n}\"","module.exports = \"<h1 mat-dialog-title>Login</h1>\\r\\n<form #loginForm=\\\"ngForm\\\" (submit)=\\\"forumSubmit(loginForm.value)\\\">\\r\\n    <div mat-dialog-content>\\r\\n        <mat-form-field style=\\\"width:100%;\\\">\\r\\n            <input type=\\\"text\\\" matInput name=\\\"username\\\" placeholder=\\\"Korisnicko ime\\\"\\r\\n                ngModel>\\r\\n        </mat-form-field>\\r\\n        <br>\\r\\n        <br>\\r\\n        <mat-form-field style=\\\"width:100%;\\\">\\r\\n            <input type=\\\"password\\\" matInput name=\\\"password\\\" placeholder=\\\"Lozinka\\\" ngModel>\\r\\n        </mat-form-field>\\r\\n        <br>\\r\\n    </div>\\r\\n    <div mat-dialog-actions>\\r\\n\\r\\n\\r\\n        <button type=\\\"submit\\\" [disabled]=\\\"!loginForm.valid\\\" color=\\\"primary\\\" mat-flat-button>\\r\\n            Login\\r\\n        </button>\\r\\n        <span style=\\\"flex: 1 1 auto;\\\"></span>\\r\\n        <button type=\\\"button\\\" mat-button (click)=\\\"onNoClick()\\\">Odustani</button>\\r\\n\\r\\n    </div>\\r\\n</form>\"","module.exports = \".example-button-row button,\\r\\n.example-button-row a {\\r\\n  margin-right: 8px;\\r\\n}\\r\\n  \\r\\n  .example-spacer {\\r\\n    flex: 1 1 auto;\\r\\n  }\\r\\n  \\r\\n  .example-container {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n  }\\r\\n  \\r\\n  .example-container > * {\\r\\n    width: 100%;\\r\\n  }\"","module.exports = \"<br>\\n<br>\\n<br>\\n\\n<mat-list class=\\\"container\\\">\\n  <h3 mat-subheader>Dokumenti</h3>\\n  <mat-list-item *ngFor=\\\"let dokument of dokumenti\\\">\\n    <mat-icon mat-list-icon>\\n      mail_outline\\n    </mat-icon>\\n    <h4 mat-line>{{dokument.naziv}}</h4>\\n    <h3 mat-line>{{dokument.imePrezime}} {{dokument.brojIndeksa}}</h3>\\n    <p mat-line>{{dokument.tipDokumenta}}</p>\\n    <span class=\\\"example-spacer\\\"></span>\\n    <button mat-icon-button color=\\\"primary\\\">\\n      <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\" (click)=\\\"deleteDoc(dokument.id)\\\">delete</mat-icon>\\n    </button>\\n    <button mat-icon-button color=\\\"primary\\\">\\n      <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\" (click)=\\\"downloadDoc(dokument.downloadUri)\\\">archive</mat-icon>\\n    </button>\\n  </mat-list-item>\\n</mat-list>\\n<br>\\n<br>\\n<br>\\n\\n<button mat-flat-button color=\\\"primary\\\" (click)=\\\"openDialog()\\\">Novi dokument</button>\"","module.exports = \"<h1 mat-dialog-title>Novi dokument</h1>\\r\\n<form #documentUploadForm=\\\"ngForm\\\" (ngSubmit)=\\\"documentUploadFunction(documentUploadForm.value)\\\">\\r\\n    <div mat-dialog-content>\\r\\n        <div ngModelGroup=\\\"dokument\\\">\\r\\n            <mat-form-field readonly=\\\"mode=='view'\\\" *ngIf=\\\"role=='administrator'\\\" style=\\\"width:100%;\\\">\\r\\n                <mat-select name=\\\"brojIndeksa\\\" ngModel placeholder=\\\"Izaberi studenta\\\" required>\\r\\n                    <mat-option>--</mat-option>\\r\\n                    <mat-option *ngFor=\\\"let student of studenti\\\" [value]=\\\"student.brojIndeksa\\\">\\r\\n                        {{student.ime}} {{student.prezime}} {{student.brojIndeksa}}\\r\\n                    </mat-option>\\r\\n                </mat-select>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field style=\\\"width:100%;\\\">\\r\\n                <input matInput name=\\\"naziv\\\" placeholder=\\\"Naziv dokumenta\\\" ngModel>\\r\\n            </mat-form-field>\\r\\n            <br>\\r\\n            <mat-form-field style=\\\"width:100%;\\\">\\r\\n                <input matInput name=\\\"tipDokumenta\\\" placeholder=\\\"Opis dokumenta\\\" ngModel>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <button mat-button (click)=\\\"fileInput.click()\\\">\\r\\n            <mat-icon>delete</mat-icon>\\r\\n            <span>Izaberi fajl </span>\\r\\n            <input #fileInput type=\\\"button\\\" name=\\\"file\\\" type=\\\"file\\\" (change)=\\\"onFileInput($event.target.files)\\\" style=\\\"display:none;\\\"\\r\\n                ngModel />\\r\\n        </button>\\r\\n        <br>\\r\\n\\r\\n\\r\\n    </div>\\r\\n    <div mat-dialog-actions>\\r\\n\\r\\n\\r\\n        <button type=\\\"submit\\\" [disabled]=\\\"dokumentToUpload==null\\\" color=\\\"primary\\\" mat-flat-button>\\r\\n            Dodaj\\r\\n        </button>\\r\\n        <span style=\\\"flex: 1 1 auto;\\\"></span>\\r\\n        <button mat-button type=\\\"button\\\" (click)=\\\"onNoClick()\\\">Odustani</button>\\r\\n\\r\\n    </div>\\r\\n</form>\"","module.exports = \"<h1 mat-dialog-title>Uplata</h1>\\r\\n<form #obavezaForm=\\\"ngForm\\\" (submit)=\\\"forumSubmit(obavezaForm.value)\\\">\\r\\n    <div mat-dialog-content>\\r\\n        <mat-form-field readonly=\\\"mode=='view'\\\" *ngIf=\\\"mode!='edit'\\\" style=\\\"width:100%;\\\">\\r\\n            <mat-select (ngModelChange)=\\\"onPredmetChange($event)\\\" name=\\\"predmetId\\\" ngModel placeholder=\\\"Izaberi predmet\\\"\\r\\n                required>\\r\\n                <mat-option>--</mat-option>\\r\\n                <mat-option *ngFor=\\\"let predmet of predmeti\\\" [value]=\\\"predmet.predmetId\\\">\\r\\n                    {{predmet.naziv}}\\r\\n                </mat-option>\\r\\n            </mat-select>\\r\\n        </mat-form-field>\\r\\n        <mat-form-field readonly=\\\"mode=='view'\\\" *ngIf=\\\"mode!='edit'\\\" style=\\\"width:100%;\\\">\\r\\n            <mat-select name=\\\"brojIndeksa\\\" ngModel placeholder=\\\"Izaberi studenta\\\" required>\\r\\n                <mat-option>--</mat-option>\\r\\n                <mat-option *ngFor=\\\"let student of studenti\\\" [value]=\\\"student.brojIndeksa\\\">\\r\\n                    {{student.ime}} {{student.prezime}} {{student.brojIndeksa}}\\r\\n                </mat-option>\\r\\n            </mat-select>\\r\\n        </mat-form-field>\\r\\n        <br>\\r\\n        <mat-form-field>\\r\\n            <input required style=\\\"width:100%;\\\"  matInput name=\\\"datumObaveze\\\" [matDatepicker]=\\\"picker\\\" style=\\\"width:100%;\\\" [ngModel]=\\\"obaveza.datumObaveze\\\"\\r\\n                placeholder=\\\"Choose a date\\\">\\r\\n            <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n            <mat-datepicker #picker></mat-datepicker>\\r\\n        </mat-form-field>\\r\\n        <br>\\r\\n        <mat-checkbox name=\\\"polozen\\\" [ngModel]=\\\"obaveza.polozen\\\">Polozen</mat-checkbox>\\r\\n\\r\\n        <br>\\r\\n        <mat-form-field style=\\\"width:100%;\\\">\\r\\n            <input [readonly]=\\\"mode=='view'\\\" matInput name=\\\"tipObaveze\\\" placeholder=\\\"Tip obaveze\\\" [ngModel]=\\\"obaveza.tipObaveze\\\">\\r\\n        </mat-form-field>\\r\\n    </div>\\r\\n    <div mat-dialog-actions>\\r\\n\\r\\n\\r\\n        <button type=\\\"submit\\\" [disabled]=\\\"mode=='view' || !obavezaForm.valid\\\" color=\\\"primary\\\" mat-flat-button>\\r\\n            Potvrdi\\r\\n        </button>\\r\\n        <span style=\\\"flex: 1 1 auto;\\\"></span>\\r\\n        <button mat-button type=\\\"button\\\" (click)=\\\"onNoClick()\\\">Odustani</button>\\r\\n\\r\\n    </div>\\r\\n</form>\"","module.exports = \"<h1 mat-dialog-title>Novi predmet</h1>\\r\\n<form #predmetForm=\\\"ngForm\\\" (ngSubmit)=\\\"submitForm(predmetForm.value)\\\">\\r\\n    <div mat-dialog-content>\\r\\n        <mat-form-field style=\\\"width:100%;\\\">\\r\\n            <input [readonly]=\\\"mode=='view'\\\" matInput name=\\\"naziv\\\" placeholder=\\\"Naziv predmeta\\\" [ngModel]=\\\"predmet.naziv\\\">\\r\\n        </mat-form-field>\\r\\n        <br>\\r\\n        <mat-form-field style=\\\"width:100%;\\\">\\r\\n            <input [readonly]=\\\"mode=='view'\\\" matInput name=\\\"opis\\\" placeholder=\\\"Opis predmeta\\\" [ngModel]=\\\"predmet.opis\\\">\\r\\n        </mat-form-field>\\r\\n        <br>\\r\\n\\r\\n\\r\\n    </div>\\r\\n    <div mat-dialog-actions>\\r\\n\\r\\n\\r\\n        <button type=\\\"submit\\\" [disabled]=\\\"predmetForm==null || mode=='view'\\\" color=\\\"primary\\\" mat-flat-button>\\r\\n            Dodaj\\r\\n        </button>\\r\\n        <span style=\\\"flex: 1 1 auto;\\\"></span>\\r\\n        <button mat-button type=\\\"button\\\" (click)=\\\"onNoClick()\\\">Odustani</button>\\r\\n\\r\\n    </div>\\r\\n</form>\"","module.exports = \"<h1 mat-dialog-title>Promena lozinke</h1>\\r\\n<form #passwordForm=\\\"ngForm\\\" (ngSubmit)=\\\"submitPassword(passwordForm.value)\\\">\\r\\n    <div mat-dialog-content>\\r\\n        <mat-form-field style=\\\"width:100%;\\\">\\r\\n            <input matInput name=\\\"oldPassword\\\" type=\\\"password\\\" placeholder=\\\"Stara lozinka\\\" ngModel>\\r\\n        </mat-form-field>\\r\\n        <br>\\r\\n        <mat-form-field style=\\\"width:100%;\\\">\\r\\n            <input matInput name=\\\"newPassword\\\" type=\\\"password\\\" placeholder=\\\"Opis predmeta\\\" ngModel>\\r\\n        </mat-form-field>\\r\\n        <br>\\r\\n\\r\\n\\r\\n    </div>\\r\\n    <div mat-dialog-actions>\\r\\n\\r\\n\\r\\n        <button type=\\\"submit\\\" [disabled]=\\\"!passwordForm.valid\\\" color=\\\"primary\\\" mat-flat-button>\\r\\n            Promeni\\r\\n        </button>\\r\\n        <span style=\\\"flex: 1 1 auto;\\\"></span>\\r\\n        <button mat-button type=\\\"button\\\" (click)=\\\"onNoClick()\\\">Odustani</button>\\r\\n\\r\\n    </div>\\r\\n</form>\"","module.exports = \"<div *ngIf=\\\"loggedIn\\\">\\n  <mat-tab-group mat-align-tabs=\\\"center\\\">\\n    <mat-tab label=\\\"Svi predmeti\\\">\\n      <mat-list>\\n        <h3 mat-subheader>Predmeti</h3>\\n        <mat-list-item *ngFor=\\\"let predmet of predmeti\\\">\\n          <mat-icon mat-list-icon>\\n            assignment\\n          </mat-icon>\\n          <h4 mat-line>{{predmet.naziv}}</h4>\\n          <h5 mat-line>{{predmet.opis}}</h5>\\n          <span class=\\\"example-spacer\\\"></span>\\n          <button mat-icon-button color=\\\"primary\\\">\\n            <mat-icon *ngIf=\\\"role=='administrator'\\\" (click)=\\\"openPredmet(predmet)\\\" aria-label=\\\"Example icon-button with a heart icon\\\">list</mat-icon>\\n          </button>\\n          <button mat-icon-button color=\\\"primary\\\">\\n            <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\" (click)=\\\"openDialog('view',predmet)\\\">fingerprint</mat-icon>\\n          </button>\\n          <button *ngIf=\\\"role=='administrator'\\\" mat-icon-button color=\\\"primary\\\">\\n            <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\" (click)=\\\"openDialog('edit',predmet)\\\">edit</mat-icon>\\n          </button>\\n          <button *ngIf=\\\"role=='administrator'\\\" mat-icon-button color=\\\"primary\\\">\\n            <mat-icon (click)=\\\"deletePredmet(predmet)\\\" aria-label=\\\"Example icon-button with a heart icon\\\">delete</mat-icon>\\n          </button>\\n        </mat-list-item>\\n      </mat-list>\\n      <button *ngIf=\\\"role=='administrator'\\\" mat-flat-button color=\\\"primary\\\" (click)=\\\"openDialog('add')\\\">Novi predmet</button>\\n\\n      <br>\\n    </mat-tab>\\n    <mat-tab label=\\\"Predmeti koje pohadja/predaje\\\" *ngIf=\\\"role!='administrator'\\\">\\n      <mat-list>\\n      <h3 mat-subheader>Predmeti</h3>\\n      <mat-list-item *ngFor=\\\"let predmet of predmetiPohadja\\\">\\n        <mat-icon mat-list-icon>\\n          assignment\\n        </mat-icon>\\n        <h4 mat-line>{{predmet.naziv}}</h4>\\n        <h5 mat-line>{{predmet.opis}}</h5>\\n        <span class=\\\"example-spacer\\\"></span>\\n        <button mat-icon-button color=\\\"primary\\\">\\n          <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\" (click)=\\\"openDialog('view',predmet)\\\">fingerprint</mat-icon>\\n        </button>\\n      </mat-list-item>\\n      </mat-list>\\n    </mat-tab>\\n\\n  </mat-tab-group>\\n</div>\\n<div *ngIf=\\\"!loggedIn\\\">\\n  Nesto nije u redu\\n</div>\"","module.exports = \"<mat-tab-group mat-align-tabs=\\\"center\\\" *ngIf=\\\"!idNotFound\\\">\\n  <mat-tab label=\\\"Studenti\\\">\\n\\n    <mat-list class=\\\"container\\\">\\n      <h3 mat-subheader>Studenti</h3>\\n      <mat-list-item *ngFor=\\\"let student of studenti\\\">\\n        <mat-icon mat-list-icon>\\n          account_circle\\n        </mat-icon>\\n        <h4 mat-line>{{student.brojIndeksa}}</h4>\\n        <p mat-line>{{student.ime}}  {{student.prezime}}</p>\\n        <span class=\\\"example-spacer\\\"></span>\\n        <button mat-icon-button color=\\\"primary\\\">\\n          <mat-icon (click)=\\\"deletePohadja(student.jmbg)\\\" aria-label=\\\"Example icon-button with a heart icon\\\">delete</mat-icon>\\n        </button>\\n      </mat-list-item>\\n    </mat-list>\\n\\n    <br>\\n\\n    <button mat-flat-button color=\\\"primary\\\" (click)=\\\"openStudDialog()\\\">Novo pohadjanje</button>    \\n\\n  </mat-tab>\\n  <mat-tab label=\\\"Nastavnici\\\">\\n    \\n    <mat-list class=\\\"container\\\">\\n      <h3 mat-subheader>Nastavnici</h3>\\n      <mat-list-item *ngFor=\\\"let nastavnik of  nastavnici\\\">\\n        <mat-icon mat-list-icon>\\n          book\\n        </mat-icon>\\n        <h4 mat-line>{{nastavnik.zvanje}}</h4>\\n        <p mat-line>{{nastavnik.ime}}  {{nastavnik.prezime}}</p>\\n        <span class=\\\"example-spacer\\\"></span>\\n        <button mat-icon-button color=\\\"primary\\\">\\n          <mat-icon (click)=\\\"deletePredaje(nastavnik.jmbg)\\\" aria-label=\\\"Example icon-button with a heart icon\\\">delete</mat-icon>\\n        </button>\\n      </mat-list-item>\\n    </mat-list>\\n\\n    <br>\\n\\n    <button mat-flat-button color=\\\"primary\\\" (click)=\\\"openNastDialog()\\\">Novi nastavnik</button>   \\n  </mat-tab>\\n</mat-tab-group>\\n\\n<br>\\n<div *ngIf=\\\"idNotFound\\\">\\n  Nesto nije u redu!\\n</div>\"","module.exports = \".content1 {\\r\\n    width: 80%;\\r\\n    margin: auto;\\r\\n}\\r\\n\\r\\ntable{\\r\\n    width: 100%;\\r\\n}\\r\\n\\r\\n.optionTd{\\r\\n    float: right;\\r\\n    right: 0px;\\r\\n} \\r\\n\"","module.exports = \"\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"crnd\";","module.exports = \"<h1 mat-dialog-title>Student</h1>\\r\\n<form #studentForm=\\\"ngForm\\\" (submit)=\\\"forumSubmit(studentForm.value)\\\">\\r\\n    <div mat-dialog-content>\\r\\n            <mat-form-field style=\\\"width:100%;\\\">\\r\\n                <input [readonly]=\\\"mode=='view'\\\" matInput name=\\\"brojIndeksa\\\" placeholder=\\\"Broj indeksa\\\" [ngModel]=\\\"student.brojIndeksa\\\">\\r\\n            </mat-form-field>\\r\\n            <br>\\r\\n            <mat-form-field style=\\\"width:100%;\\\">\\r\\n                <input [readonly]=\\\"mode=='view'\\\" matInput name=\\\"korisnickoIme\\\" placeholder=\\\"Korisnicko ime\\\" [ngModel]=\\\"student.korisnickoIme\\\">\\r\\n            </mat-form-field>\\r\\n            <br>\\r\\n            <mat-form-field style=\\\"width:100%;\\\">\\r\\n                <input [readonly]=\\\"mode=='view'\\\" matInput name=\\\"ime\\\" placeholder=\\\"Ime\\\" [ngModel]=\\\"student.ime\\\">\\r\\n            </mat-form-field>\\r\\n            <br>\\r\\n            <mat-form-field style=\\\"width:100%;\\\">\\r\\n                <input [readonly]=\\\"mode=='view'\\\" matInput name=\\\"prezime\\\" placeholder=\\\"Prezime\\\" [ngModel]=\\\"student.prezime\\\">\\r\\n            </mat-form-field>\\r\\n            <br>\\r\\n            <mat-form-field style=\\\"width:100%;\\\">\\r\\n                <input [readonly]=\\\"mode=='view'\\\" matInput name=\\\"email\\\" placeholder=\\\"Email\\\" [ngModel]=\\\"student.email\\\">\\r\\n            </mat-form-field>\\r\\n            <br>\\r\\n            <mat-form-field *ngIf=\\\"mode=='edit' || mode=='add'\\\" style=\\\"width:100%;\\\">\\r\\n                <input [readonly]=\\\"mode=='view'\\\" type=\\\"password\\\" matInput name=\\\"lozinka\\\" placeholder=\\\"Lozinka\\\" [ngModel]=\\\"student.lozinka\\\">\\r\\n            </mat-form-field>\\r\\n            <br *ngIf=\\\"mode=='edit' || mode=='add'\\\">\\r\\n            <mat-form-field style=\\\"width:100%;\\\">\\r\\n                <input [readonly]=\\\"mode=='view'\\\" matInput name=\\\"ulicaBroj\\\" placeholder=\\\"Ulica i broj\\\" [ngModel]=\\\"student.ulicaBroj\\\">\\r\\n            </mat-form-field>\\r\\n            <br>\\r\\n            <mat-form-field style=\\\"width:100%;\\\">\\r\\n                <input [readonly]=\\\"mode=='view'\\\" matInput name=\\\"postanskiBroj\\\" placeholder=\\\"Postanski broj\\\" [ngModel]=\\\"student.postanskiBroj\\\">\\r\\n            </mat-form-field>\\r\\n            <br>\\r\\n            <mat-form-field style=\\\"width:100%;\\\">\\r\\n                <input [readonly]=\\\"mode=='view'\\\" matInput name=\\\"mesto\\\" placeholder=\\\"Mesto\\\" [ngModel]=\\\"student.mesto\\\">\\r\\n            </mat-form-field>\\r\\n            <br>\\r\\n        <br>\\r\\n\\r\\n\\r\\n    </div>\\r\\n    <div mat-dialog-actions>\\r\\n\\r\\n\\r\\n        <button type=\\\"submit\\\" [disabled]=\\\"mode=='view' || !studentForm.valid\\\" color=\\\"primary\\\" mat-flat-button>\\r\\n            Potvrdi\\r\\n        </button>\\r\\n        <span style=\\\"flex: 1 1 auto;\\\"></span>\\r\\n        <button mat-button (click)=\\\"onNoClick()\\\">Odustani</button>\\r\\n\\r\\n    </div>\\r\\n</form>\"","module.exports = \"\"","module.exports = \"<mat-tab-group mat-align-tabs=\\\"center\\\">\\n  <mat-tab label=\\\"Studenti\\\">\\n\\n    <mat-list class=\\\"container\\\">\\n      <h3 mat-subheader>Studenti</h3>\\n      <mat-list-item *ngFor=\\\"let student of studenti\\\">\\n        <mat-icon mat-list-icon>\\n          account_circle\\n        </mat-icon>\\n        <h4 mat-line>{{student.brojIndeksa}}</h4>\\n        <p mat-line>{{student.ime}}  {{student.prezime}}</p>\\n        <span class=\\\"example-spacer\\\"></span>\\n        <button mat-icon-button color=\\\"primary\\\">\\n          <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\" (click)=\\\"openStudDialog('view',student)\\\">fingerprint</mat-icon>\\n        </button>\\n        <button mat-icon-button color=\\\"primary\\\">\\n          <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\" (click)=\\\"openStudDialog('edit',student)\\\">edit</mat-icon>\\n        </button>\\n        <button (click)=\\\"deleteStudent(student)\\\" mat-icon-button color=\\\"primary\\\">\\n          <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\">delete</mat-icon>\\n        </button>\\n      </mat-list-item>\\n    </mat-list>\\n\\n    <br>\\n\\n    <button mat-flat-button color=\\\"primary\\\" (click)=\\\"openStudDialog('add')\\\">Novi student</button>    \\n\\n  </mat-tab>\\n  <mat-tab label=\\\"Nastavnici\\\">\\n    \\n    <mat-list class=\\\"container\\\">\\n      <h3 mat-subheader>Nastavnici</h3>\\n      <mat-list-item *ngFor=\\\"let nastavnik of  nastavnici\\\">\\n        <mat-icon mat-list-icon>\\n          account_circle\\n        </mat-icon>\\n        <h4 mat-line>{{nastavnik.zvanje}}</h4>\\n        <p mat-line>{{nastavnik.ime}}  {{nastavnik.prezime}}</p>\\n        <span class=\\\"example-spacer\\\"></span>\\n        <button mat-icon-button color=\\\"primary\\\">\\n          <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\" (click)=\\\"openNastDialog('view',nastavnik)\\\">fingerprint</mat-icon>\\n        </button>\\n        <button mat-icon-button color=\\\"primary\\\">\\n          <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\" (click)=\\\"openNastDialog('edit',nastavnik)\\\">edit</mat-icon>\\n        </button>\\n        <button (click)=\\\"deleteNastavnik(nastavnik)\\\" mat-icon-button color=\\\"primary\\\">\\n          <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\">delete</mat-icon>\\n        </button>\\n      </mat-list-item>\\n    </mat-list>\\n\\n    <br>\\n\\n    <button mat-flat-button color=\\\"primary\\\" (click)=\\\"openNastDialog('add')\\\">Novi nastavnik</button>   \\n  </mat-tab>\\n  <mat-tab label=\\\"Svi korisnici\\\">\\n  \\n      <mat-list class=\\\"container\\\">\\n          <h3 mat-subheader>Svi korisnici</h3>\\n          <mat-list-item *ngFor=\\\"let student of  korisnici\\\">\\n            <mat-icon mat-list-icon>\\n              account_circle\\n            </mat-icon>\\n            <h4 mat-line>{{student.ime}}  {{student.prezime}}</h4>\\n            <p mat-line>{{student.email}}  {{student.brojTelefona}}</p>\\n          </mat-list-item>\\n        </mat-list>\\n    \\n        <br>\\n  </mat-tab>\\n\\n</mat-tab-group>\\n\\n<br>\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<mat-toolbar color=\\\"primary\\\">\\n  <button mat-button routerLink=\\\"/predmeti\\\" color=\\\"accent\\\">Predmeti</button>\\n  <button *ngIf=\\\"role!='nastavnik'\\\" mat-button routerLink=\\\"/uplate\\\" color=\\\"accent\\\">Uplate</button>\\n  <button *ngIf=\\\"role!='nastavnik'\\\" mat-button routerLink=\\\"/dokumenti\\\" color=\\\"accent\\\">Dokumenti</button>\\n  <button *ngIf=\\\"role=='administrator'\\\" mat-button routerLink=\\\"/korisnici\\\" color=\\\"accent\\\">Korisnici</button>\\n  <button mat-button routerLink=\\\"/obaveza\\\" color=\\\"accent\\\">Obaveze</button>\\n\\n  <span class=\\\"fil-space\\\"></span>\\n    <p>{{currentUser?.username}}</p>\\n    &nbsp;&nbsp;\\n  <button *ngIf=\\\"!loggedIn\\\" mat-raised-button color=\\\"accent\\\" (click)=\\\"openLoginDialog()\\\">Prijava</button>\\n  <button *ngIf=\\\"loggedIn\\\" mat-raised-button color=\\\"accent\\\" [matMenuTriggerFor]=\\\"menu\\\">Opcije</button>\\n<mat-menu  #menu=\\\"matMenu\\\">\\n  <button  mat-button color=\\\"primary\\\" (click)=\\\"promenaLozinke()\\\">Promena lozinke</button>\\n  <br>\\n  <button  mat-button color=\\\"primary\\\" (click)=\\\"odjava()\\\">Odjava</button>\\n</mat-menu>\\n\\n</mat-toolbar>\\n<router-outlet></router-outlet>\\n\"","module.exports = \"\"","module.exports = \"\"","module.exports = \"<h1 mat-dialog-title>Uplata</h1>\\r\\n<form #uplataForm=\\\"ngForm\\\" (submit)=\\\"forumSubmit(uplataForm.value)\\\">\\r\\n    <div mat-dialog-content>\\r\\n        <mat-form-field readonly=\\\"mode=='view'\\\" *ngIf=\\\"mode!='edit'\\\" style=\\\"width:100%;\\\">\\r\\n            <mat-select name=\\\"brojIndeksa\\\" ngModel placeholder=\\\"Izaberi studenta\\\" required>\\r\\n                <mat-option>--</mat-option>\\r\\n                <mat-option *ngFor=\\\"let student of studenti\\\" [value]=\\\"student.brojIndeksa\\\">\\r\\n                    {{student.ime}} {{student.prezime}} {{student.brojIndeksa}}\\r\\n                </mat-option>\\r\\n            </mat-select>\\r\\n        </mat-form-field>\\r\\n\\r\\n        <br>\\r\\n        <mat-form-field style=\\\"width:100%;\\\">\\r\\n            <input [readonly]=\\\"mode=='view'\\\" type=\\\"text\\\" matInput name=\\\"svrhaUplate\\\" placeholder=\\\"Svrha uplate\\\"\\r\\n                [ngModel]=\\\"uplata.svrhaUplate\\\">\\r\\n        </mat-form-field>\\r\\n        <br>\\r\\n        <br>\\r\\n        <mat-form-field style=\\\"width:100%;\\\">\\r\\n            <input [readonly]=\\\"mode=='view'\\\" type=\\\"number\\\" matInput name=\\\"iznos\\\" placeholder=\\\"Iznos\\\" [ngModel]=\\\"uplata.iznos\\\">\\r\\n        </mat-form-field>\\r\\n        <br>\\r\\n    </div>\\r\\n    <div mat-dialog-actions>\\r\\n\\r\\n\\r\\n        <button type=\\\"submit\\\" [disabled]=\\\"mode=='view' || !uplataForm.valid\\\" color=\\\"primary\\\" mat-flat-button>\\r\\n            Potvrdi\\r\\n        </button>\\r\\n        <span style=\\\"flex: 1 1 auto;\\\"></span>\\r\\n        <button mat-button (click)=\\\"onNoClick()\\\">Odustani</button>\\r\\n\\r\\n    </div>\\r\\n</form>\"","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Dokument } from '../interface/Dokument';\nimport { Http, Headers, Response, RequestOptions, RequestMethod } from '@angular/http';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DokumentService {\n\n  constructor(private _http: HttpClient) { }\n\n\n  sviDokumenti(){\n    return this._http.get<Dokument[]>(\"/api/dokument/all\")\n  }\n\n  downloadFile(fileName:string){\n    return this._http.get(\"/api/downloadFile/\"+fileName, { responseType: 'blob' });\n  }\n\n  deleteDoc(id:number){\n    return this._http.delete(\"/api/dokument/\"+id);\n  }\n\n  uploadDoc(document){\n    console.log(document);\n    let formData: FormData = new FormData();\n    formData.append('file',document.file,document.file.name)\n    formData.append('dokument',JSON.stringify(document.dokument));\n    return this._http.post(\"/api/uploadDoc\",formData);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SnackBarService {\n\n  constructor(public snackBar:MatSnackBar) { }\n\n  openSnackBar(message:string,action:string){\n    this.snackBar.open(message,action, {\n      duration: 2000,\n    });\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Student } from '../interface/Student';\nimport { Nastavnik } from '../interface/Nastavnik';\nimport { Korisnik } from '../interface/Korisnik';\nimport { PasswordChange } from '../interface/PasswordChange';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class KorisnikService {\n\n  constructor(private _http: HttpClient) { }\n\n  getStudents(){\n    return this._http.get<Student[]>(\"/api/students\");\n  }\n\n  getNastavnici(){\n    return this._http.get<Nastavnik[]>(\"/api/nastavnici\")\n  }\n\n  getKorisnici(){\n    return this._http.get<Korisnik[]>(\"/api/korisnici\");\n  }\n\n  uploadStudent(student:Student,mode:string){\n    if(mode==\"add\"){\n      return this._http.post(\"/api/student\",student);\n    } else {\n      return this._http.put(\"/api/student\",student);\n    }\n  }\n\n  uploadNastavnik(nastavnik:Nastavnik,mode:string){\n    if(mode==\"add\"){\n      return this._http.post(\"/api/nastavnik\",nastavnik);\n    } else {\n      return this._http.put(\"/api/nastavnik\",nastavnik);\n    }\n  }\n\n  deleteStudent(id:number){\n    return this._http.delete(\"/api/student/\"+id);\n  }\n\n  deleteNastavnik(id:number){\n    return this._http.delete(\"/api/nastavnik/\"+id);\n  }\n\n  getByPredmetId(id){\n    return this._http.get<Student[]>('/api/students/'+id);\n  }\n\n  getNastavnikByPredmetId(id){\n    return this._http.get<Nastavnik[]>('/api/nastavnik/'+id);\n  }\n\n  potencijalniNastavnici(id){\n    return this._http.get<Nastavnik[]>('/api/nastavnik/not/'+id)\n  }\n\n  potencijalniStudenti(predmetId){\n    return this._http.get<Student[]>('/api/students/not/'+predmetId);\n  }\n\n  changePassowrd(data:PasswordChange){\n    return this._http.post('/api/lozinka',data);\n  }\n  \n\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JwtUtilsService {\n\n  constructor() { }\n  \n  getRoles(token:string){\n    let jwtData = token.split('.')[1]\n    let decodedJwtJsonData = window.atob(jwtData)\n    let decodedJwtData = JSON.parse(decodedJwtJsonData)\n    console.log(decodedJwtData);\n    return decodedJwtData.role['authority'];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { JwtUtilsService } from './jwt-utils.service';\nimport { Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { LoginData } from '../interface/LoginData';\nimport { JsonPipe } from '@angular/common';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n\n  private readonly loginPath: string = '/api/login'\n\n  constructor(private http: HttpClient, private jwtUtilsService: JwtUtilsService) { }\n\n  login(user: LoginData) {\n    let contentHeader = new HttpHeaders();\n    return this.http.post(this.loginPath, user, { headers: contentHeader, observe: 'response', responseType: 'text' }).pipe(map((res: any) => {\n      let token = res['body'];\n      if(token!=\"\"){\n        localStorage.setItem('currentUser',JSON.stringify({\n          username:user.username,\n          role:this.jwtUtilsService.getRoles(token),\n          token:token\n        }));\n        return true;\n      }\n      return false;\n    }));\n  }\n\n  getToken(): String {\n    var currentUser = JSON.parse(localStorage.getItem('currentUser'));\n    var token = currentUser && currentUser.token;\n    return token ? token : \"\";\n  }\n\n  logout(): void {\n    localStorage.removeItem('currentUser');\n  }\n\n  getRole():string{\n    if(this.isLoggedIn()){\n      return JSON.parse(localStorage.getItem('currentUser')).role;\n    }\n    return \"notLoggedIn\";\n  }\n\n  isLoggedIn(): boolean {\n    if (this.getToken() != '') return true;\n    else return false;\n  }\n}\n","import {Component, Inject, OnInit} from '@angular/core';\r\nimport {MatDialog, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material';\r\nimport { DokumentService } from '../services/dokument.service';\r\nimport { KorisnikService } from '../services/korisnik.service';\r\nimport { Student } from '../interface/Student';\r\nimport { AuthenticationService } from '../security/authentication.service';\r\n\r\n\r\n@Component({\r\n    selector: 'novi.dokument.dialog',\r\n    templateUrl: 'novi.dokument.dialog.html',\r\n  })\r\n  export class NoviDokumentDialog implements OnInit{\r\n\r\n  constructor(\r\n    public dokumentService:DokumentService,\r\n    public dialogRef: MatDialogRef<NoviDokumentDialog>,\r\n    @Inject(MAT_DIALOG_DATA) public dokument,\r\n    private korisnikService:KorisnikService,\r\n    private authService:AuthenticationService) {}\r\n    \r\n    dokumentToUpload:File = null;\r\n    studenti:Student[];\r\n    isLoggedIn:boolean=false;\r\n    role:string=\"\";\r\n    ngOnInit(): void {\r\n      this.isLoggedIn=this.authService.isLoggedIn();\r\n      this.role = this.authService.getRole();\r\n      this.ucitavanjeStudenata();\r\n    }\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onFileInput(files: FileList){\r\n    this.dokumentToUpload = files.item(0);\r\n  }\r\n\r\n  documentUploadFunction(dokument){\r\n    dokument.file = this.dokumentToUpload;\r\n    console.log(dokument);\r\n    this.dokumentService.uploadDoc(dokument).subscribe(\r\n      success=> this.dialogRef.close(\"success\"),\r\n      error=> console.log(error.message)\r\n    );\r\n  }\r\n\r\n  ucitavanjeStudenata(){\r\n    this.korisnikService.getStudents().subscribe(\r\n      success=>{\r\n        this.studenti = success;\r\n      },\r\n      error=> console.log(error)\r\n    );\r\n  }\r\n\r\n  }","import { Component, OnInit } from '@angular/core';\nimport { DokumentService } from '../services/dokument.service';\nimport { Dokument } from '../interface/Dokument';\nimport { saveAs } from \"file-saver\";\nimport { SnackBarService } from '../services/snack-bar.service';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { MatDialog } from '@angular/material';\nimport { NoviDokumentDialog } from '../dialogs/novi.dokument.dialog';\nimport { Student } from '../interface/Student';\nimport { KorisnikService } from '../services/korisnik.service';\nimport { AuthenticationService } from '../security/authentication.service';\n\n@Component({\n  selector: 'app-dokument-list',\n  templateUrl: './dokument-list.component.html',\n  styleUrls: ['./dokument-list.component.css']\n})\nexport class DokumentListComponent implements OnInit {\n\n  constructor(private dokumentService:DokumentService,\n              private snackBarService:SnackBarService,\n              public dialog: MatDialog,\n              private korisnikService:KorisnikService,\n              private authService:AuthenticationService) { }\n\n  dokumenti:Dokument[];\n  dokumentToUpload:File = null;\n  studenti:Student[];\n  isLoggedIn:boolean=false;\n  role:string=\"notLoggedIn\";\n\n  ngOnInit() {\n    this.isLoggedIn=this.authService.isLoggedIn();\n    this.role = this.authService.getRole();\n    this.ucitavanjeDokumenata();\n    this.ucitavanjeStudenata();\n  }\n  openDialog(): void {\n    const dialogRef = this.dialog.open(NoviDokumentDialog, {\n      width: '350px',\n      data: {name: \"Aleksandar\"}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      this.ucitavanjeDokumenata();\n\n    });\n  }\n  onFileInput(files: FileList){\n    this.dokumentToUpload = files.item(0);\n  }\n\n  documentUploadFunction(dokument){\n    dokument.file = this.dokumentToUpload;\n    console.log(dokument);\n    this.dokumentService.uploadDoc(dokument).subscribe(\n      success=> this.ucitavanjeDokumenata(),\n      error=> console.log(error.message)\n    );\n  }\n\n  ucitavanjeDokumenata(){\n    this.dokumentService.sviDokumenti().subscribe(\n      success => {\n        this.dokumenti = success;\n        console.log(this.dokumenti);\n      },\n      error=> console.log(error)\n    )\n  }\n\n  ucitavanjeStudenata(){\n    this.korisnikService.getStudents().subscribe(\n      success=>{\n        this.studenti = success;\n      },\n      error=> console.log(error)\n    );\n  }\n\n  deleteDoc(id:number){\n    this.dokumentService.deleteDoc(id).subscribe(\n      success=>{\n        this.ucitavanjeDokumenata();\n        this.openSnackBar(\"Dokument je obrisan\");\n      }, error=>{\n        console.log(error);\n      }\n    )\n  }\n  \n  openSnackBar(message:string){\n    this.snackBarService.openSnackBar(message,\"ok\");\n  }\n\n  downloadDoc(fileName:string){\n    this.dokumentService.downloadFile(fileName).subscribe(\n      success=>{\n        var blob = new Blob([success]);\n        saveAs(blob,fileName.split(\"/\")[1])\n      },error=>{\n        console.log(error)\n      }\n    )\n  }\n}\n","import { Component, Inject, OnInit } from \"@angular/core\";\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from \"@angular/material\";\r\nimport { Student } from \"../interface/Student\";\r\nimport { KorisnikService } from \"../services/korisnik.service\";\r\n\r\n\r\n@Component({\r\n    selector: 'sudent.dialog',\r\n    templateUrl: 'student.dialog.html'\r\n})\r\nexport class StudentDialog implements OnInit{\r\n\r\n    constructor(\r\n        public korisnikService:KorisnikService,\r\n        public dialogRef:MatDialogRef<StudentDialog>,\r\n        @Inject(MAT_DIALOG_DATA) public dialogData\r\n    ){}\r\n\r\n    student:Student;\r\n    mode:string = \"view\";\r\n\r\n    ngOnInit(): void {\r\n        console.log(this.dialogData)\r\n        this.student = this.dialogData.student;\r\n        this.mode = this.dialogData.mode;\r\n\r\n    }\r\n\r\n    forumSubmit(formData:Student):void{\r\n        console.log(formData);\r\n        if(this.mode==\"edit\"){\r\n            formData.jmbg = this.student.jmbg\r\n        }\r\n        this.korisnikService.uploadStudent(formData,this.mode).subscribe(\r\n            success=> this.onNoClick(\"success\"),\r\n            error => console.log(\"Nece nesto\")\r\n        );\r\n    }\r\n\r\n    onNoClick(result:string=\"none\"): void {\r\n        this.dialogRef.close(result);\r\n    }\r\n    \r\n\r\n}","import { Component, Inject, OnInit } from \"@angular/core\";\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from \"@angular/material\";\r\nimport { Nastavnik } from \"../interface/Nastavnik\";\r\nimport { KorisnikService } from \"../services/korisnik.service\";\r\n\r\n@Component({\r\n    selector: 'nastavnik.dialog',\r\n    templateUrl: 'nastavnik.dialog.html'\r\n})\r\nexport class NastavnikDialog implements OnInit{\r\n\r\n    constructor(\r\n        public dialogRef:MatDialogRef<NastavnikDialog>,\r\n        @Inject(MAT_DIALOG_DATA) public dialogData,\r\n        private korisnikService:KorisnikService\r\n    ){}\r\n\r\n    nastavnik:Nastavnik;\r\n    mode:string = \"view\";\r\n\r\n    ngOnInit(): void {\r\n        console.log(this.dialogData)\r\n        this.nastavnik = this.dialogData.nastavnik;\r\n        this.mode = this.dialogData.mode;\r\n\r\n    }\r\n\r\n    forumSubmit(formData:Nastavnik):void{\r\n        if(this.mode==\"edit\"){\r\n             formData.jmbg=this.nastavnik.jmbg;\r\n        }\r\n        this.korisnikService.uploadNastavnik(formData,this.mode).subscribe(\r\n            resoult=>{\r\n                this.dialogRef.close(\"success\");\r\n            },\r\n            error=>{\r\n                console.log(error);\r\n            }\r\n        )\r\n    }\r\n\r\n    onNoClick(): void {\r\n        this.dialogRef.close();\r\n    }\r\n    \r\n\r\n}","import { Component, OnInit } from '@angular/core';\nimport { Student } from '../interface/Student';\nimport { KorisnikService } from '../services/korisnik.service';\nimport { MatDialog } from '@angular/material';\nimport { StudentDialog } from '../dialogs/student.dialog';\nimport { Nastavnik } from '../interface/Nastavnik';\nimport { NastavnikDialog } from '../dialogs/nastavnik.dialog';\nimport { Korisnik } from '../interface/Korisnik';\nimport { SnackBarService } from '../services/snack-bar.service';\n\n@Component({\n  selector: 'app-korisnici',\n  templateUrl: './korisnici.component.html',\n  styleUrls: ['./korisnici.component.css']\n})\nexport class KorisniciComponent implements OnInit {\n\n  constructor(private korisnikService:KorisnikService,\n              private dialog:MatDialog,\n              private snackBarService:SnackBarService) { }\n\n  studenti:Student[];\n  nastavnici:Nastavnik[];\n  korisnici:Korisnik[];\n\n  ngOnInit() {\n    this.loadStudents();\n    this.loadNastavnici();\n    this.loadKorisnici();\n  }\n\n  deleteNastavnik(nastavnik:Nastavnik){\n    if(confirm(\"Zelite li da izbrisete nastavnika \" + nastavnik.ime + \" \" + nastavnik.prezime)){\n      this.korisnikService.deleteNastavnik(nastavnik.jmbg).subscribe(\n        success=>{this.loadNastavnici();\n          this.snackBarService.openSnackBar(\"Nastavnik uspesno izbrisan\",\"ok\")\n        },\n        error=>this.snackBarService.openSnackBar(\"Problem sa brisanjem nastavnika!\",\"ok\")\n      )\n    }\n  }\n\n\n  loadStudents(){\n    this.korisnikService.getStudents().subscribe(\n      success=> {\n        this.studenti = success;\n      }, error => {\n        this.snackBarService.openSnackBar(\"Problem sa ucitavanjem studenata!\",\"ok\")\n      }\n    )\n  }\n\n  loadNastavnici(){\n    this.korisnikService.getNastavnici().subscribe(\n      success=> {\n        this.nastavnici = success;\n      }, error => {\n        console.log(\"Ucitavanje nije uspelo!\")\n      }\n    )\n  }\n\n  loadKorisnici(){\n    this.korisnikService.getKorisnici().subscribe(\n      success=> {\n        this.korisnici = success;\n      }, error => {\n        console.log(\"Ucitavanje nije uspelo!\")\n      }\n    )\n  }\n\n\n  openStudDialog(mode,student:Student = <Student>{}):void{\n    const dialogRef = this.dialog.open(StudentDialog,{\n      width:'400px',\n      data: {mode:mode,student:student}\n    });\n\n    dialogRef.afterClosed().subscribe(result=>{\n      if(result==\"success\"){\n        this.ngOnInit();\n      }\n    });\n  }\n\n  openNastDialog(mode,student:Nastavnik = <Nastavnik>{}):void{\n    const dialogRef = this.dialog.open(NastavnikDialog,{\n      width:'400px',\n      data: {mode:mode,nastavnik:student}\n    });\n\n    dialogRef.afterClosed().subscribe(result=>{\n      if(result==\"success\"){\n        this.loadNastavnici();\n      }\n    });\n  }\n\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Uplata } from './interface/Uplata';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UplataService {\n\n  constructor(private _http:HttpClient) { }\n\n  ucitajUplate(){\n    return this._http.get<Uplata[]>(\"/api/uplate\");\n  }\n\n  deleteUplata(id:number){\n    return this._http.delete('api/uplata/'+id);\n  }\n\n  dodajUplatu(mode:string, uplata:Uplata){\n    if(mode==\"add\"){\n    return this._http.post(\"/api/uplata\",uplata);\n    } else {\n      return this._http.put(\"/api/uplata\",uplata);\n\n    }\n\n  }\n\n}\n","import { Component, OnInit, Inject } from \"@angular/core\";\r\nimport { Uplata } from \"../interface/Uplata\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material\";\r\nimport { KorisnikService } from \"../services/korisnik.service\";\r\nimport { UplataService } from \"../uplata.service\";\r\nimport { Student } from \"../interface/Student\";\r\n\r\n\r\n\r\n@Component({\r\n    selector: 'uplata.dialog',\r\n    templateUrl: 'uplata.dialog.html'\r\n})\r\nexport class UplataDialog implements OnInit{\r\n\r\n    constructor(\r\n        public korisnikService:KorisnikService,\r\n        public uplataService:UplataService,\r\n        public dialogRef:MatDialogRef<UplataDialog>,\r\n        @Inject(MAT_DIALOG_DATA) public dialogData\r\n    ){}\r\n\r\n    uplata:Uplata;\r\n    mode:string = \"view\";\r\n    studenti:Student[];\r\n\r\n    ngOnInit(): void {\r\n        console.log(this.dialogData)\r\n        this.uplata = this.dialogData.uplata;\r\n        this.mode = this.dialogData.mode;\r\n        this.ucitajStudente();\r\n\r\n    }\r\n\r\n    forumSubmit(formData:Uplata):void{\r\n        console.log(formData);\r\n        if(this.mode==\"edit\"){\r\n            formData.id = this.uplata.id;\r\n            formData.datumUplate = this.uplata.datumUplate;\r\n            formData.brojIndeksa = this.uplata.brojIndeksa;\r\n        }\r\n        this.uplataService.dodajUplatu(this.mode,formData).subscribe(\r\n            success=> this.onNoClick(\"success\"),\r\n            error => console.log(\"Nece nesto\")\r\n        );\r\n    }\r\n\r\n    onNoClick(result:string=\"none\"): void {\r\n        this.dialogRef.close(result);\r\n    }\r\n\r\n    ucitajStudente(){\r\n        this.korisnikService.getStudents().subscribe(\r\n          success=> this.studenti = success,\r\n          error=> console.log(\"Greska prilikom ucitavanja studenata\")\r\n        )\r\n      }\r\n    \r\n\r\n}","import { Component, OnInit } from '@angular/core';\nimport { UplataService } from '../uplata.service';\nimport { Uplata } from '../interface/Uplata';\nimport { MatDialog } from '@angular/material';\nimport { UplataDialog } from '../dialogs/uplata.dialog';\nimport { KorisnikService } from '../services/korisnik.service';\nimport { Student } from '../interface/Student';\nimport { AuthenticationService } from '../security/authentication.service';\n\n@Component({\n  selector: 'app-uplate',\n  templateUrl: './uplate.component.html',\n  styleUrls: ['./uplate.component.css']\n})\nexport class UplateComponent implements OnInit {\n\n  constructor(public uplataService:UplataService,\n              private dialog:MatDialog,\n              private korisnikService:KorisnikService,\n              private authService:AuthenticationService) { }\n\n  uplate:Uplata[];\n  studenti:Student[];\n  loggedIn:boolean=false;\n  role:string;\n\n  ngOnInit() {\n    this.loggedIn=this.authService.isLoggedIn();\n    this.role=this.authService.getRole();\n    if(this.role!=\"nastavnik\"){\n      this.loadUplate();\n    }\n  }\n\n  loadUplate():void{\n    this.uplataService.ucitajUplate().subscribe(\n      success=> {\n        this.uplate = success;\n      },\n      error=>console.log(\"Nece da ucita uplate\")\n    )\n  }\n  \n  openDialog(mode,uplata:Uplata = <Uplata>{}):void{\n    const dialogRef = this.dialog.open(UplataDialog,{\n      width:'400px',\n      data:{mode:mode,uplata:uplata}\n    });\n\n    dialogRef.afterClosed().subscribe(resoult=>{\n      if(resoult==\"success\"){\n        this.ngOnInit();\n      }\n    });\n  }\n  \n  ucitajStudente(){\n    this.korisnikService.getStudents().subscribe(\n      success=> this.studenti = success,\n      error=> console.log(\"Greska prilikom ucitavanja studenata\")\n    )\n  }\n\n  deleteUplata(uplata:Uplata){\n    if(confirm(\"Da li zelite da izbrisete uplatu?\")){\n      this.uplataService.deleteUplata(uplata.id).subscribe(\n        success=>this.loadUplate(),\n        error=>console.log(error)\n      )\n    }\n  }\n\n  \n\n\n}\n","import { Injectable } from '@angular/core';\nimport { Predmet } from '../interface/Predmet';\nimport { HttpClient } from '@angular/common/http';\nimport { Page } from '../interface/page';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PredmetService {\n\n  constructor(private _http:HttpClient) { }\n\n  getAll(){\n    return this._http.get<Predmet[]>(\"/api/predmeti\");\n  }\n\n  getAllPaged(page:number,pageSize:number){\n    return this._http.get<Page>('/api/predmeti/paged?page='+page+'&direction=ASC&order=opis&size='+pageSize);\n  }\n\n  postPredmet(mode:string,predmet:Predmet){\n    if(mode==\"add\"){\n      return this._http.post(\"/api/predmet\",predmet);\n    } else if(mode==\"edit\"){\n      return this._http.put(\"/api/predmet/\"+predmet.predmetId,predmet);\n    }\n  }\n\n  deletePredmet(predmet:Predmet){\n    return this._http.delete('/api/predmet/'+predmet.predmetId);\n  }\n\n  getAllPohadja(){\n    return this._http.get<Predmet[]>('/api/predmeti/pohadja');\n  }\n\n  getAllPredaje(){\n    return this._http.get<Predmet[]>('/api/predmeti/predaje');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpModule } from '@angular/http';\nimport { Obaveza } from '../interface/Obaveza';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ObavezaService {\n\n  constructor(private _http:HttpClient) { }\n\n  dodaj(obaveza:Obaveza){\n    return this._http.post('/api/obaveza',obaveza);\n  }\n\n  getAll(){\n    return this._http.get<Obaveza[]>('/api/obaveze');\n  }\n  \n  poloziPredmet(id){\n    return this._http.get('/api/obaveza/polozen/'+id)\n  }\n\n  deleteObaveza(id:number){\n    return this._http.delete('/api/obaveza/'+id);\n  }\n\n\n}\n","import { Component, OnInit, Inject } from \"@angular/core\";\r\nimport { Uplata } from \"../interface/Uplata\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material\";\r\nimport { KorisnikService } from \"../services/korisnik.service\";\r\nimport { UplataService } from \"../uplata.service\";\r\nimport { Student } from \"../interface/Student\";\r\nimport { Obaveza } from \"../interface/Obaveza\";\r\nimport { Predmet } from \"../interface/Predmet\";\r\nimport { PredmetService } from \"../services/predmet.service\";\r\nimport { ObavezaService } from \"../services/obaveza.service\";\r\n\r\n\r\n\r\n@Component({\r\n    selector: 'obaveza.dialog',\r\n    templateUrl: 'obaveza.dialog.html'\r\n})\r\nexport class ObavezaDialog implements OnInit{\r\n\r\n    constructor(\r\n        public korisnikService:KorisnikService,\r\n        public uplataService:UplataService,\r\n        public dialogRef:MatDialogRef<ObavezaDialog>,\r\n        @Inject(MAT_DIALOG_DATA) public dialogData,\r\n        private predmetService:PredmetService,\r\n        private obavezaService:ObavezaService\r\n    ){}\r\n\r\n    obaveza:Obaveza;\r\n    mode:string = \"view\";\r\n    studenti:Student[];\r\n    predmeti:Predmet[];\r\n\r\n    ngOnInit(): void {\r\n        console.log(this.dialogData)\r\n        this.obaveza = this.dialogData.obaveza;\r\n        this.mode = this.dialogData.mode;\r\n        this.ucitajPredmete();\r\n        if(this.mode==\"add\"){\r\n            this.obaveza.polozen=false;\r\n        }\r\n\r\n    }\r\n\r\n    onPredmetChange(val){\r\n        this.korisnikService.getByPredmetId(val).subscribe(\r\n            response=>{\r\n                this.studenti=response;\r\n            },\r\n            error=>console.log(error)\r\n        )\r\n    }\r\n\r\n    // forumSubmit(formData:Uplata):void{\r\n    //     console.log(formData);\r\n    //     if(this.mode==\"edit\"){\r\n    //         formData.id = this.uplata.id;\r\n    //         formData.datumUplate = this.uplata.datumUplate;\r\n    //         formData.brojIndeksa = this.uplata.brojIndeksa;\r\n    //     }\r\n    //     this.uplataService.dodajUplatu(this.mode,formData).subscribe(\r\n    //         success=> this.onNoClick(\"success\"),\r\n    //         error => console.log(\"Nece nesto\")\r\n    //     );\r\n    // }\r\n\r\n    forumSubmit(formData:Obaveza):void{\r\n        console.log(formData);\r\n        this.obavezaService.dodaj(formData).subscribe(\r\n            success=>this.dialogRef.close(\"success\"),\r\n            error=>console.log(error)\r\n        )\r\n    }\r\n\r\n    onNoClick(result:string=\"none\"): void {\r\n        this.dialogRef.close(result);\r\n    }\r\n\r\n    ucitajStudente(){\r\n        this.korisnikService.getStudents().subscribe(\r\n          success=> this.studenti = success,\r\n          error=> console.log(\"Greska prilikom ucitavanja studenata\")\r\n        )\r\n      }\r\n    \r\n    ucitajPredmete(){\r\n        this.predmetService.getAll().subscribe(\r\n            success=>this.predmeti=success,\r\n            error=>console.log(error)\r\n        );\r\n    }\r\n\r\n\r\n    \r\n    \r\n\r\n}","import { Component, OnInit } from '@angular/core';\nimport { Obaveza } from '../interface/Obaveza';\nimport { MatDialog } from '@angular/material';\nimport { ObavezaDialog } from '../dialogs/obaveza.dialog';\nimport { ObavezaService } from '../services/obaveza.service';\nimport { getAllDebugNodes } from '@angular/core/src/debug/debug_node';\nimport { AuthenticationService } from '../security/authentication.service';\nimport { SnackBarService } from '../services/snack-bar.service';\n\n@Component({\n  selector: 'app-obaveza',\n  templateUrl: './obaveza.component.html',\n  styleUrls: ['./obaveza.component.css']\n})\nexport class ObavezaComponent implements OnInit {\n\n  constructor(private dialog:MatDialog,private obavezaService:ObavezaService,\n              private authService:AuthenticationService,\n              private snackBarService:SnackBarService) { }\n\n  obaveze:Obaveza[];\n  loggedIn=false;\n  role:string;\n\n  ngOnInit() {\n    this.getAll();\n    this.loggedIn=this.authService.isLoggedIn();\n    this.role=this.authService.getRole();\n  }\n\n  openDialog(mode:string,obaveza:Obaveza=<Obaveza>{}):void{\n    const dialogRef = this.dialog.open(ObavezaDialog,{\n      width:'400px',\n      data:{mode:mode,obaveza:obaveza}\n    })\n\n    dialogRef.afterClosed().subscribe(\n      resoult=>{\n        if(resoult==\"success\"){\n          this.getAll();\n        }\n      }\n    )\n    \n    }\n\n    poloziPredmet(id):void{\n      if(confirm(\"Da li ste sigurni\")){\n      this.obavezaService.poloziPredmet(id).subscribe(\n        success=>{this.getAll()\n          this.snackBarService.openSnackBar(\"Predmet polozen!\",\"ok\")\n        },\n        error=>console.log(error)\n      )\n      }\n    }\n  \n\n  getAll():void{\n    this.obavezaService.getAll().subscribe(\n      response=>this.obaveze=response,\n      error=>console.log(error)\n    )\n  }\n\n  deleteObaveza(obaveza:Obaveza){\n    if(confirm(\"Zelite li da izbrisete obavezu?\")){\n      this.obavezaService.deleteObaveza(obaveza.id).subscribe(\n        success=>this.getAll(),\n        error=>console.log(error)\n      )\n    }\n  }\n\n}\n","import { Component, OnInit, Inject } from \"@angular/core\";\r\nimport { Uplata } from \"../interface/Uplata\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material\";\r\nimport { KorisnikService } from \"../services/korisnik.service\";\r\nimport { UplataService } from \"../uplata.service\";\r\nimport { Student } from \"../interface/Student\";\r\nimport { Obaveza } from \"../interface/Obaveza\";\r\nimport { Predmet } from \"../interface/Predmet\";\r\nimport { PredmetService } from \"../services/predmet.service\";\r\nimport { ObavezaService } from \"../services/obaveza.service\";\r\nimport { AuthenticationService } from \"../security/authentication.service\";\r\n\r\n\r\n\r\n@Component({\r\n    selector: 'predmet.dialog',\r\n    templateUrl: 'predmet.dialog.html'\r\n})\r\nexport class PredmetDialog implements OnInit{\r\n\r\n    constructor(\r\n        public dialogRef:MatDialogRef<PredmetDialog>,\r\n        @Inject(MAT_DIALOG_DATA) public dialogData,\r\n        private predmetService:PredmetService\r\n    ){}\r\n\r\n    predmet:Predmet;\r\n    mode:string = \"view\";\r\n\r\n    ngOnInit(): void {\r\n        console.log(this.dialogData)\r\n        this.mode = this.dialogData.mode;\r\n        this.predmet=this.dialogData.predmet;\r\n    }\r\n\r\n\r\n    submitForm(formData:Predmet):void{\r\n        if(this.mode==\"edit\"){\r\n            formData.predmetId=this.predmet.predmetId;\r\n        }\r\n        this.predmetService.postPredmet(this.mode,formData).subscribe(\r\n            success=>this.dialogRef.close(\"success\"),\r\n            error=>console.log(error)\r\n        )\r\n    }\r\n\r\n    onNoClick(result:string=\"none\"): void {\r\n        this.dialogRef.close(result);\r\n    }\r\n\r\n\r\n}","import { Component, OnInit } from '@angular/core';\nimport { PredmetService } from '../services/predmet.service';\nimport { Predmet } from '../interface/Predmet';\nimport { MatDialog } from '@angular/material';\nimport { PredmetDialog } from './predmet.dialog';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from '../security/authentication.service';\n\n@Component({\n  selector: 'app-predmet',\n  templateUrl: './predmet.component.html',\n  styleUrls: ['./predmet.component.css']\n})\nexport class PredmetComponent implements OnInit {\n\n  constructor(private predmetService:PredmetService,\n              private dialog:MatDialog,\n              private router:Router,\n              private authService:AuthenticationService) { }\n\n  predmeti:Predmet[];\n  loggedIn:boolean=false;\n  role:string;\n  predmetiPohadja:Predmet[];\n\n  ngOnInit() :void{\n    this.loggedIn=this.authService.isLoggedIn();\n    this.role=this.authService.getRole();\n    this.getAll();\n    if(this.role==\"student\"){\n      this.getAllPredmetPohadja();\n    } \n    if(this.role==\"nastavnik\"){\n      this.getAllPredmetPredaje();\n    }\n    \n  }\n\n  openDialog(mode:string,predmet:Predmet = <Predmet >{}){\n    const dialogRef = this.dialog.open(PredmetDialog,{\n      width:'400px',\n      data:{mode:mode,predmet:predmet},\n    });\n    dialogRef.afterClosed().subscribe(resoult=>{\n      if(resoult==\"success\"){\n        this.getAll();\n      }\n    })\n  }\n\n  getAll():void{\n    this.predmetService.getAll().subscribe(\n      response=>this.predmeti=response,\n      error=>console.log(error)\n    )\n  }\n  deletePredmet(predmet:Predmet):void{\n    if(confirm(\"Zelite li da izbrisete predmet \" + predmet.naziv +\" ?\",)){\n      this.predmetService.deletePredmet(predmet).subscribe(\n        success=> this.getAll(),\n        error=>console.log(error)\n      )\n    }\n  }\n\n  openPredmet(predmet:Predmet):void{\n    this.router.navigate(['/predmet-info'],{queryParams:{id:predmet.predmetId}});\n  }\n\n  getAllPredmetPohadja(){\n    this.predmetService.getAllPohadja().subscribe(\n      success=>this.predmetiPohadja = success,\n      error=>console.log(error)\n    )\n  }\n\n  getAllPredmetPredaje(){\n    this.predmetService.getAllPredaje().subscribe(\n      success=>this.predmetiPohadja = success,\n      error=>console.log(error)\n    )\n  }\n\n}\n","import { Component, OnInit, Inject } from \"@angular/core\";\r\nimport { Uplata } from \"../interface/Uplata\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material\";\r\nimport { KorisnikService } from \"../services/korisnik.service\";\r\nimport { UplataService } from \"../uplata.service\";\r\nimport { Student } from \"../interface/Student\";\r\nimport { Obaveza } from \"../interface/Obaveza\";\r\nimport { Predmet } from \"../interface/Predmet\";\r\nimport { PredmetService } from \"../services/predmet.service\";\r\nimport { ObavezaService } from \"../services/obaveza.service\";\r\nimport { Pohadja } from \"../interface/Pohadja\";\r\n\r\n\r\n\r\n@Component({\r\n    selector: 'pohadja.dialog',\r\n    templateUrl: 'pohadja.dialog.html'\r\n})\r\nexport class PohadjaDialog implements OnInit{\r\n\r\n    constructor(\r\n        public korisnikService:KorisnikService,\r\n        public uplataService:UplataService,\r\n        public dialogRef:MatDialogRef<PohadjaDialog>,\r\n        @Inject(MAT_DIALOG_DATA) public dialogData,\r\n        private predmetService:PredmetService,\r\n        private obavezaService:ObavezaService\r\n    ){}\r\n\r\n    predmetId:number;\r\n    studenti:Student[];\r\n    predmeti:Predmet[];\r\n\r\n    ngOnInit(): void {\r\n        this.predmetId=this.dialogData.predmetId;\r\n        this.ucitajStudente();\r\n\r\n    }\r\n\r\n\r\n\r\n  \r\n    forumSubmit(formData:Pohadja):void{\r\n        this.dialogRef.close(formData);\r\n    }\r\n\r\n    onNoClick(result:string=\"none\"): void {\r\n        this.dialogRef.close(result);\r\n    }\r\n\r\n    ucitajStudente(){\r\n        this.korisnikService.potencijalniStudenti(this.predmetId).subscribe(\r\n          success=> this.studenti = success,\r\n          error=> console.log(\"Greska prilikom ucitavanja studenata\")\r\n        )\r\n      }\r\n\r\n\r\n\r\n    \r\n    \r\n\r\n}","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Pohadja } from '../interface/Pohadja';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PohadjaPredajeService {\n\n  constructor(private _http:HttpClient) { }\n\n  novoPohadjanje(pohadja:Pohadja){\n    return this._http.post('/api/pohadja',pohadja);\n  }\n\n  novoPredavanje(predaje:Pohadja){\n    return this._http.post(\"/api/predaje\",predaje);\n  }\n\n  deletePredaje(predmetId,jmbg){\n    return this._http.delete(\"/api/predaje/\"+predmetId+\"/\"+jmbg);\n  }\n\n  deletePohadja(predmetId,jmbg){\n    return this._http.delete(\"/api/pohadja/\"+predmetId+\"/\"+jmbg);\n  }\n\n}\n","import { Component, OnInit, Inject } from \"@angular/core\";\r\nimport { Uplata } from \"../interface/Uplata\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material\";\r\nimport { KorisnikService } from \"../services/korisnik.service\";\r\nimport { UplataService } from \"../uplata.service\";\r\nimport { Student } from \"../interface/Student\";\r\nimport { Obaveza } from \"../interface/Obaveza\";\r\nimport { Predmet } from \"../interface/Predmet\";\r\nimport { PredmetService } from \"../services/predmet.service\";\r\nimport { ObavezaService } from \"../services/obaveza.service\";\r\nimport { Pohadja } from \"../interface/Pohadja\";\r\nimport { Nastavnik } from \"../interface/Nastavnik\";\r\n\r\n\r\n\r\n@Component({\r\n    selector: 'predaje.dialog',\r\n    templateUrl: 'predaje.dialog.html'\r\n})\r\nexport class PredajeDialog implements OnInit{\r\n\r\n    constructor(\r\n        public korisnikService:KorisnikService,\r\n        public dialogRef:MatDialogRef<PredajeDialog>,\r\n        @Inject(MAT_DIALOG_DATA) public dialogData,\r\n        private predmetService:PredmetService,\r\n    ){}\r\n\r\n    predmetId:number;\r\n    nastavnici:Nastavnik[];\r\n\r\n    ngOnInit(): void {\r\n        this.predmetId=this.dialogData.predmetId;\r\n        this.ucitajStudente();\r\n\r\n    }\r\n\r\n    forumSubmit(formData:Pohadja):void{\r\n        this.dialogRef.close(formData);\r\n    }\r\n\r\n    onNoClick(result:string=\"none\"): void {\r\n        this.dialogRef.close(result);\r\n    }\r\n\r\n    ucitajStudente(){\r\n        this.korisnikService.potencijalniNastavnici(this.predmetId).subscribe(\r\n          success=> this.nastavnici = success,\r\n          error=> console.log(\"Greska prilikom ucitavanja studenata\")\r\n        )\r\n      }\r\n\r\n\r\n\r\n    \r\n    \r\n\r\n}","import { Component, OnInit } from '@angular/core';\nimport { Student } from '../interface/Student';\nimport { Nastavnik } from '../interface/Nastavnik';\nimport { KorisnikService } from '../services/korisnik.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { MatDialog } from '@angular/material';\nimport { PohadjaDialog } from '../dialogs/pohadja.dialog';\nimport { Pohadja } from '../interface/Pohadja';\nimport { PohadjaPredajeService } from '../services/pohadja.predaje.service';\nimport { PredajeDialog } from '../dialogs/predaje.dialog';\n\n@Component({\n  selector: 'app-predmet-info',\n  templateUrl: './predmet-info.component.html',\n  styleUrls: ['./predmet-info.component.css']\n})\nexport class PredmetInfoComponent implements OnInit {\n\n  constructor(private korisnikService: KorisnikService,\n    private pohadjaPredajeService:PohadjaPredajeService,\n    private route: ActivatedRoute,\n    private dialog:MatDialog) {\n    this.predmetId = parseInt(this.route.snapshot.queryParamMap.get('id'));\n  }\n\n  studenti: Student[];\n  potencijalniStudenti: Student[];\n  nastavnici: Nastavnik[];\n  potencijalniNastavnici:Nastavnik[];\n  predmetId: number = 0;\n  idNotFound:boolean=true;\n\n\n  ngOnInit() {\n    if(isNaN(this.predmetId)){\n      this.idNotFound=true;\n    }else{\n      this.idNotFound=false;\n      this.studentiKojiPohadjaju();\n      this.getNastavnici();\n    }\n  }\n\n  studentiKojiPohadjaju(): void {\n    this.korisnikService.getByPredmetId(this.predmetId).subscribe(\n      response => this.studenti = response,\n      error => console.log(error)\n    )\n  }\n\n\n  getNastavnici(): void {\n    this.korisnikService.getNastavnikByPredmetId(this.predmetId).subscribe(\n      response => this.nastavnici = response,\n      error => console.log(error)\n    )\n  }\n\n  openStudDialog(): void {\n    const dialogRef = this.dialog.open(PohadjaDialog,{\n      width:'400px',\n      data:{predmetId:this.predmetId}\n    })\n\n    dialogRef.afterClosed().subscribe(\n      (pohadja:Pohadja)=>{\n        pohadja.predmetId=this.predmetId;\n        console.log(pohadja);\n        this.pohadjaPredajeService.novoPohadjanje(pohadja).subscribe(\n          success=>this.ngOnInit(),\n          error=>console.log(error)\n        )\n      }\n    )\n  }\n\n  openNastDialog():void{\n    const dialogRef = this.dialog.open(PredajeDialog,{\n      width:'350px',\n      data:{predmetId:this.predmetId}\n    })\n\n    dialogRef.afterClosed().subscribe(\n      (pohadja:Pohadja)=>{\n        pohadja.predmetId=this.predmetId;\n        console.log(pohadja);\n        this.pohadjaPredajeService.novoPredavanje(pohadja).subscribe(\n          success=>this.ngOnInit(),\n          error=>console.log(error)\n        )\n      }\n    )\n  }\n\n  deletePredaje(jmbg){\n    if(confirm(\"Zelite li da izbrisete nastavnika sa ovog predmeta?\")){\n    this.pohadjaPredajeService.deletePredaje(this.predmetId,jmbg).subscribe(\n      success=>this.ngOnInit(),\n      error=>console.log(error)\n    )\n  }}\n\n  deletePohadja(jmbg){\n    if(confirm(\"Zelite li da izbrisete studenta sa ovog predmeta?\")){\n    this.pohadjaPredajeService.deletePohadja(this.predmetId,jmbg).subscribe(\n      success=>this.ngOnInit(),\n      error=>console.log(error)\n    )\n  }}\n\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { DokumentListComponent } from './dokument-list/dokument-list.component';\nimport { KorisniciComponent } from './korisnici/korisnici.component';\nimport { UplateComponent } from './uplate/uplate.component';\nimport { ObavezaComponent } from './obaveza/obaveza.component';\nimport { PredmetComponent } from './predmet/predmet.component';\nimport { PredmetInfoComponent } from './predmet-info/predmet-info.component';\n\nconst routes: Routes = [\n  {path:'dokumenti',component:DokumentListComponent},\n  {path:'korisnici',component:KorisniciComponent},\n  {path:'uplate',component:UplateComponent},\n  {path:'obaveza',component:ObavezaComponent},\n  {path:'predmeti',component:PredmetComponent},\n  {path:'predmet-info',component:PredmetInfoComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit, Inject } from \"@angular/core\";\r\nimport { Uplata } from \"../interface/Uplata\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material\";\r\nimport { KorisnikService } from \"../services/korisnik.service\";\r\nimport { UplataService } from \"../uplata.service\";\r\nimport { AuthenticationService } from \"../security/authentication.service\";\r\nimport { LoginData } from \"../interface/LoginData\";\r\nimport { SnackBarService } from \"../services/snack-bar.service\";\r\n\r\n\r\n\r\n@Component({\r\n    selector: 'login.dialog',\r\n    templateUrl: 'login.dialog.html'\r\n})\r\nexport class LoginDialog implements OnInit{\r\n\r\n    constructor(\r\n        public korisnikService:KorisnikService,\r\n        public uplataService:UplataService,\r\n        public dialogRef:MatDialogRef<LoginDialog>,\r\n        private authService:AuthenticationService,\r\n        private snackBar:SnackBarService\r\n    ){}\r\n\r\n    ngOnInit(): void {\r\n\r\n\r\n    }\r\n\r\n\r\n    forumSubmit(formData:LoginData):void{\r\n        this.authService.login(formData).subscribe(\r\n            success=> {this.dialogRef.close(\"success\")\r\n            location.reload()},\r\n            error=>this.snackBar.openSnackBar(\"Pogresan username/password\",\"ok\")\r\n        )\r\n    }\r\n\r\n    onNoClick(): void {\r\n        this.dialogRef.close();\r\n    }\r\n\r\n    \r\n\r\n}","import { Component, OnInit, Inject } from \"@angular/core\";\r\nimport { Uplata } from \"../interface/Uplata\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material\";\r\nimport { KorisnikService } from \"../services/korisnik.service\";\r\nimport { UplataService } from \"../uplata.service\";\r\nimport { AuthenticationService } from \"../security/authentication.service\";\r\nimport { LoginData } from \"../interface/LoginData\";\r\nimport { PasswordChange } from \"../interface/PasswordChange\";\r\n\r\n\r\n\r\n@Component({\r\n    selector: 'password.dialog',\r\n    templateUrl: 'password.dialog.html'\r\n})\r\nexport class PasswordDialog implements OnInit{\r\n\r\n    constructor(\r\n        public korisnikService:KorisnikService,\r\n        public dialogRef:MatDialogRef<PasswordDialog>,\r\n    ){}\r\n\r\n    ngOnInit(): void {\r\n\r\n\r\n    }\r\n\r\n\r\n    submitPassword(formData:PasswordChange):void{\r\n        this.korisnikService.changePassowrd(formData).subscribe(\r\n            success=>this.dialogRef.close(\"success\"),\r\n            error=>console.log(error)\r\n        )\r\n    }\r\n\r\n    onNoClick(): void {\r\n        this.dialogRef.close();\r\n    }\r\n\r\n    \r\n\r\n}","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material';\nimport { LoginDialog } from './dialogs/login.dialog';\nimport { AuthenticationService } from './security/authentication.service';\nimport { PasswordDialog } from './dialogs/password.dialog';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit{\n\n  constructor(public dialog:MatDialog,private authService:AuthenticationService){}\n\n  loggedIn:boolean=false;\n  currentUser;\n  role:string;\n\n  ngOnInit(): void {\n    this.loggedIn=this.authService.isLoggedIn();\n    if(this.loggedIn){\n      this.currentUser=JSON.parse(localStorage.getItem('currentUser'));\n      this.role = this.authService.getRole();\n    }\n  }\n\n\n  title = 'app';\n\n  openLoginDialog():void{\n    const dialogRef = this.dialog.open(LoginDialog,{\n      width:'350px'\n    });\n\n    dialogRef.afterClosed().subscribe(resoult=>\n      {\n        if(resoult==\"success\"){\n          this.loggedIn=true;\n        }\n      })\n    \n  }\n\n  promenaLozinke():void{\n    const dialogRef = this.dialog.open(PasswordDialog,{width:'350px'});\n    dialogRef.afterClosed().subscribe(\n      resoult=>{\n        if(resoult==\"success\"){\n          this.odjava();\n        }\n      }\n    )\n  }\n\n  odjava(){\n    localStorage.clear();\n    this.loggedIn=false;\n    location.reload();\n  }\n}\n","import {CdkTableModule} from '@angular/cdk/table';\r\nimport {CdkTreeModule} from '@angular/cdk/tree';\r\nimport {HttpClientModule} from '@angular/common/http';\r\nimport {NgModule} from '@angular/core';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {\r\n  MatAutocompleteModule,\r\n  MatBadgeModule,\r\n  MatBottomSheetModule,\r\n  MatButtonModule,\r\n  MatButtonToggleModule,\r\n  MatCardModule,\r\n  MatCheckboxModule,\r\n  MatChipsModule,\r\n  MatDatepickerModule,\r\n  MatDialogModule,\r\n  MatDividerModule,\r\n  MatExpansionModule,\r\n  MatGridListModule,\r\n  MatIconModule,\r\n  MatInputModule,\r\n  MatListModule,\r\n  MatMenuModule,\r\n  MatNativeDateModule,\r\n  MatPaginatorModule,\r\n  MatProgressBarModule,\r\n  MatProgressSpinnerModule,\r\n  MatRadioModule,\r\n  MatRippleModule,\r\n  MatSelectModule,\r\n  MatSidenavModule,\r\n  MatSliderModule,\r\n  MatSlideToggleModule,\r\n  MatSnackBarModule,\r\n  MatSortModule,\r\n  MatStepperModule,\r\n  MatTableModule,\r\n  MatTabsModule,\r\n  MatToolbarModule,\r\n  MatTooltipModule,\r\n  MatTreeModule,\r\n} from '@angular/material';\r\nimport {BrowserModule} from '@angular/platform-browser';\r\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\n\r\n@NgModule({\r\n  exports: [\r\n    CdkTableModule,\r\n    CdkTreeModule,\r\n    MatAutocompleteModule,\r\n    MatBadgeModule,\r\n    MatBottomSheetModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatStepperModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatNativeDateModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    MatTreeModule,\r\n  ]\r\n})\r\n\r\nexport class MaterialModule { }","import { Injectable } from '@angular/core';\nimport { HttpInterceptor } from '@angular/common/http';\nimport { HttpRequest } from '@angular/common/http';\nimport { HttpHandler } from '@angular/common/http';\nimport { HttpEvent } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http/src/headers';\nimport { Injector } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AuthenticationService } from './authentication.service';\n\n@Injectable()\nexport class TokenInterceptorService implements HttpInterceptor {\n\n  constructor(private inj: Injector) { }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    let authenticationService:AuthenticationService = this.inj.get(AuthenticationService); \n    request = request.clone({\n      setHeaders: {\n        'X-Auth-Token': `${authenticationService.getToken()}`\n      }\n    });\n\n    return next.handle(request);\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { from } from 'rxjs';\nimport { MaterialModule } from './material.module';\nimport { DokumentListComponent } from './dokument-list/dokument-list.component';\nimport { HttpClientModule, HttpClient, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { DokumentService } from './services/dokument.service';\nimport { FormsModule } from '@angular/forms';\nimport { NoviDokumentDialog } from './dialogs/novi.dokument.dialog';\nimport { KorisniciComponent } from './korisnici/korisnici.component';\nimport { StudentDialog } from './dialogs/student.dialog';\nimport { NastavnikDialog } from './dialogs/nastavnik.dialog';\nimport { UplateComponent } from './uplate/uplate.component';\nimport { UplataDialog } from './dialogs/uplata.dialog';\nimport { ObavezaComponent } from './obaveza/obaveza.component';\nimport { LoginDialog } from './dialogs/login.dialog';\nimport { TokenInterceptorService } from './security/token-interceptor.service';\nimport { ObavezaDialog } from './dialogs/obaveza.dialog';\nimport { PredmetComponent } from './predmet/predmet.component';\nimport { PredmetInfoComponent } from './predmet-info/predmet-info.component';\nimport { PohadjaDialog } from './dialogs/pohadja.dialog';\nimport { PredmetDialog } from './predmet/predmet.dialog';\nimport { PasswordDialog } from './dialogs/password.dialog';\nimport { PredajeDialog } from './dialogs/predaje.dialog';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DokumentListComponent,\n    NoviDokumentDialog,\n    KorisniciComponent,\n    StudentDialog,\n    NastavnikDialog,\n    UplateComponent,\n    UplataDialog,\n    ObavezaComponent,\n    LoginDialog,\n    ObavezaDialog,\n    PredmetComponent,\n    PredmetInfoComponent,\n    PohadjaDialog,\n    PredmetDialog,\n    PasswordDialog,\n    PredajeDialog\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  entryComponents:[NoviDokumentDialog,StudentDialog,PredmetDialog,NastavnikDialog,UplataDialog,LoginDialog,ObavezaDialog,\n  PohadjaDialog,PasswordDialog,PredajeDialog],\n  providers: [DokumentService,HttpClient,{\n    provide:HTTP_INTERCEPTORS,\n    useClass:TokenInterceptorService,\n    multi:true\n  }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport 'hammerjs';\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}